// Common colors

#define CL_MAGIC                        0xffcc00
#define CL_POINTER                      0xccffcc
#define CL_PADDING                      0x777777
#define CL_SINGLEVALUE                  0xbbbbff
#define CL_FLOATS                       0xdddddd
#define CL_COUNT                        0xaaddff
#define CL_NAME                         0xa5b2c8
#define CL_NAME_LENGTH                  0xb5c2d8
#define CL_CHECKSUM                     0xbbffff
#define CL_PARSED                       0xeeeeee
#define CL_IMPORTANT_BG                 0x333333
#define CL_IMPORTANT_FG                 0x8888ff

#define MESHFLAG_HASVERTEXCOLORS        1 << 4
#define MESHFLAG_HASWEIGHTS             1 << 7

typedef struct (int start_value)
{
    local int start_value = start_value;
    int offset;
} RelativeOffset <read=ReadRelativeOffset>;

int AbsOffset(RelativeOffset &off)
{
    return off.start_value + off.offset;
}

string ReadRelativeOffset(RelativeOffset &off)
{
    local string s;
    return SPrintf(s, "%d", AbsOffset(off));
}

int SnapAmount(int a, int snap_value)
{
    local int extra = a % snap_value;

    if (extra > 0)
        return (snap_value - extra);

    return 0;
}

int SnappedNumber(int a, int snap_value)
{
    local int am = SnapAmount(a, snap_value);
    if (am > 0)
        return a + am;

    return a;
}

void SkipTo(int snap_value)
{
    local int skip_amount = SnapAmount(FTell(), snap_value);
    if (skip_amount > 0)
        FSkip(skip_amount);
}

typedef struct
{
    int values[3];
} Int3 <read=ReadInt3>;

typedef struct
{
    int values[4];
} Int4 <read=ReadInt4>;

typedef struct
{
    float values[2];
} Vec2 <read=ReadVec2>;

typedef struct
{
    float values[3];
} Vec3 <read=ReadVec3>;

typedef struct
{
    float values[4];
} Vec4 <read=ReadVec4>;

typedef struct
{
    Vec3 position;
    float radius;
} Sphere <read=ReadSphere>;

typedef struct
{
    uint checksum;
} QBKey <read=ReadQBKey>;

string ReadQBKey(QBKey &key)
{
    local string s;
    return "0x" + SPrintf(s, "%x", key.checksum);
}

string ReadVec2(Vec2 &vec)
{
    local string s;
    return SPrintf(s, "(%f, %f)", vec.values[0], vec.values[1]);
}

string ReadVec3(Vec3 &vec)
{
    local string s;
    return SPrintf(s, "(%f, %f, %f)", vec.values[0], vec.values[1], vec.values[2]);
}

string ReadVec4(Vec4 &vec)
{
    local string s;
    return SPrintf(s, "(%f, %f, %f, %f)", vec.values[0], vec.values[1], vec.values[2], vec.values[3]);
}

string ReadInt3(Int3 &num)
{
    local string s;
    return SPrintf(s, "(%d, %d, %d)", num.values[0], num.values[1], num.values[2]);
}

string ReadInt4(Int4 &num)
{
    local string s;
    return SPrintf(s, "(%d, %d, %d, %d)", num.values[0], num.values[1], num.values[2], num.values[3]);
}

string ReadSphere(Sphere &vec)
{
    local string s;
    return SPrintf(s, "(%f, %f, %f), %f", vec.position.values[0], vec.position.values[1], vec.position.values[2], vec.radius);
}

int Vec4ToColor(float r, float g, float b, float a)
{
    local int r_int = Min(255, Floor(255 * (r / 1.0)));
    local int g_int = Min(255, Floor(255 * (g / 1.0)));
    local int b_int = Min(255, Floor(255 * (b / 1.0)));

    g_int = g_int << 8;
    b_int = b_int << 16;

    return r_int + g_int + b_int;
}

typedef struct
{
    uint count <bgcolor=CL_NAME_LENGTH>;
    
    if (count > 0)
        char text[count] <bgcolor=CL_NAME, optimize=false>;
} NumString<read=ReadNumString>;

string ReadNumString(NumString& str)
{
    return str.count > 0 ? str.text : "";
}

// Numstring, but single byte

typedef struct
{
    ubyte count <bgcolor=CL_NAME_LENGTH>;
    
    if (count > 0)
        char text[count] <bgcolor=CL_NAME, optimize=false>;
} ByteString<read=ReadByteString>;

string ReadByteString(ByteString& str)
{
    return str.count > 0 ? str.text : "";
}

// Container / Matrix

typedef struct
{
    QBKey magic <bgcolor=CL_MAGIC>;
    int pointer_valuecount <bgcolor=CL_POINTER>;
    int valueCount <bgcolor=CL_SINGLEVALUE>;
    float values[ valueCount ] <bgcolor=CL_FLOATS>;
} OTMatrix;

// Count, followed by pointers

typedef struct
{
    short count <bgcolor=CL_COUNT>;
    short null <bgcolor=CL_PADDING>;

    int pointers[count] <bgcolor=CL_POINTER>;
} Count;

typedef struct
{
    local int chars;
    local int off = FTell();
    local ubyte byt = ReadByte(off);

    while (chars < 300 && byt != 0)
    {
        chars ++;
        off ++;
        
        byt = ReadByte(off);
    }

    char charlist[chars] <bgcolor=CL_NAME>;
    ubyte term <hidden=true, bgcolor=CL_PADDING>;

} TermString <read=ReadTermString>;

string ReadTermString(TermString &str)
{
    return str.charlist;
}

string PeekTermString()
{
    local uint old_off = FTell();
    local string str = "";
    local ubyte chr = ReadUByte();

    while (chr != 0x00)
    {
        SPrintf(str, "%s%d", str, chr);
        FSeek(FTell() + 1);
        chr = ReadUByte();
    }

    FSeek(old_off);

    return str;
}

typedef struct
{
    RelativeOffset name_offset(0);
    local int old_off = FTell();
    FSeek(AbsOffset(name_offset));
    TermString name;
    FSeek(old_off);
} NamePointer <read=ReadNamePointer>;

string ReadNamePointer(NamePointer &ptr)
{
    return ReadTermString(ptr.name);
}