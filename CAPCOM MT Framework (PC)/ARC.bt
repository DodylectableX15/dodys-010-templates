//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: Capcom MT Framework Engine .ARC Archive Template
//   Authors: Dodylectable (Making the template / Finding out a few new hashes) - Che (DMC4 non-SE format hashes) - Rick Gibbed (DD / RE5 hashes) - Many others for format hashes
//   Version: 1.8
//   Purpose: Reverse engineering Capcom games' .ARC archive format that're powered by MT Framework
//  Category: Archives
// File Mask: .ARC
//  ID Bytes: 41 52 43 00
//   History: 
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

typedef struct // THE HEADER STRUCT
{
    char Magic[4] <comment="Archive magic, always ARC", name="Archive Magic">;
    ushort Version <comment="Archive version", name="Archive Version">;
    ushort FileCount <comment="File count", name="Archive File Count">;
} Header <comment="The archive's header", name="Archive Header">;

typedef struct // THE FILES STRUCT
{
    char FileListing[64] <comment="File listing, always 64 bytes long", name="File Listing">;
    uint FormatHash <format=hex, comment="File format extension hash (CRC32)", name="File Format Extension Hash (CRC32)">;
    uint CompressedFileSize <comment="File's compressed filesize", name="Compressed File Size">;
    ubyte UncompressedFileSize[3] <comment="File's uncompressed filesize", name="Uncompressed File Size, Probably">;
    ubyte FileFlags <comment="File flags", name="File Flags">;
    uint FileOffset <comment="File offset", name="File Offset">;
} Files<read=ReadFiles, name="Archive File">;

string ReadFiles(Files &entry) // READ HASHES AND RETURN THEM AS THEIR ORIGINAL FORMAT EXTENSIONS
{
    switch (entry.FormatHash)
    {
        case 0x241F5DEB:
        case 0x3CAD8076: // DEVIL MAY CRY 4 (NON SPECIAL EDITION) HASH
            return ".tex - Texture";
            break;
            
        case 0x2749C8A8:
            return ".mrl - Material";
            break;
            
        case 0x76820D81:
        case 0x139EE51D: // DEVIL MAY CRY 4 (NON SPECIAL EDITION) HASH
            return ".lmt - Motion List";
            break;

        case 0x358012E8:
            return ".vib - Vibration";
            break;
            
        case 0x6D5AE854:
            return ".efl - Effect List";
            break;
            
        case 0x4E397417:
            return ".ean - Effect Animation";
            break;
            
        case 0x4C0DB839:
            return ".sdl - Scheduler";
            break;
            
        case 0x58A15856:
        case 0x1041BD9E: // DEVIL MAY CRY 4 (NON SPECIAL EDITION) HASH
            return ".mod - Model";
            break;

        case 0x36E29465:
            return ".hkx - Havok Collision";
            break;

        case 0x51FC779F:
            return ".sbc - Collision";
            break;

        case 0x4EF19843:
            return ".nav - Navigation Mesh";
            break;

        case 0x3E363245: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".chn - Chain";
            break;

        case 0x65B275E5:
            return ".sce - Scenario";
            break;

        case 0x1BCC4966:
            return ".srq - Sound Request";
            break;

        case 0x357EF6D4: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".lrp - ????";
            break;

        case 0x326F732E: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".cst - ????";
            break;

        case 0x26E7FF:
            return ".ccl - Chain Collision";
            break;

        case 0x5A7E5D8A:
            return ".anm - Animation";
            break;

        case 0x448BBDD4:
            return ".gem - ????";
            break;

        case 0x9A64A8: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".lmcm - Maya Camera List (XML Camera Info?)";
            break;

        case 0x724DF879: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".xsew - Sound Source (OGG Vorbis)";
            break;

        case 0x15D782FB: // ULTIMATE MARVEL VS. CAPCOM 3 HASH
            return ".sbkr - Sound Bank";
            break;

        case 0x535D969F:
            return ".ctc - ????";
            break;

        case 0x2282360D:
            return ".jex - Joint EX";
            break;

        case 0x2D12E086:
            return ".srd - Sound (Random)";
            break;

        case 0x7E33A16C:
            return ".spc - Sound Package";
            break;

        case 0x4CA26828:
            return ".bmse - Sound Motion";
            break;

        case 0x7437CCE:
            return ".base - Sound Attributes";
            break;

        case 0x12191BA1:
            return ".epv - Effect Provider";
            break;

        case 0x27F3C33D:
            return ".dfd - ????";
            break;

        case 0x652A93A4:
            return ".atk - ????";
            break;

        case 0x470745CB:
            return ".txt - Text Document?";
            break;

        case 0x4EA4E09A:
            return ".col - ????";
            break;

        case 0x21034C90:
            return ".arcs - Archive (Same as ARC)";
            break;

        case 0x5A7FEA62:
            return ".ik - Inverse Kinematics Related?";
            break;

        case 0x7808EA10:
            return ".rtex - Render Target Texture";
            break;

        case 0x39C52040:
            return ".lcm - Camera List";
            break;

        case 0x66B45610:
            return ".fsm - AI FSM";
            break;

        case 0x2C4666D1:
            return ".smh - ????";
            break;

        case 0x6A5CDD23:
            return ".occ - ????";
            break;

        case 0x437BCF2:
            return ".grw - Effect (Grass Wind)";
            break;

        case 0x2833703:
            return ".efs - Effect Strip";
            break;

        case 0x276DE8B7:
            return ".e2d - Effect (2D)";
            break;

        case 0x39D71F2:
            return ".rvt - Sound Related?";
            break;

        case 0x266E8A91:
            return ".lku - Link Unit";
            break;

        case 0x167DBBFF:
            return ".stq - Sound Stream Request";
            break;

        case 0x5F36B659:
            return ".way - AI Waypoint";
            break;

        case 0x15302EF4:
            return ".lot - Layout";
            break;

        case 0x1B520B68:
            return ".zon - Zone";
            break;

        case 0x272B80EA:
            return ".prp - Prop Parameter";
            break;

        case 0x1ED12F1B:
            return ".glp - Goal Position";
            break;

        case 0x5802B3FF:
            return ".ahc - AH Camera";
            break;

        case 0x285A13D9:
            return ".vzo - ????";
            break;

        case 0x2A4F96A8:
            return ".rbd - Rigid Body";
            break;

        case 0x3B5C7FD3: // RESIDENT EVIL 6 HASH
            return ".ida - ????";
            break;

        case 0x296BD0A6:
            return ".hgm - ????";
            break;

        case 0x6E45FABB:
            return ".atk - ????";
            break;

        case 0x253F147:
            return ".hit - ????";
            break;

        case 0x35BDD173:
            return ".poa - ????";
            break;

        case 0x14EA8095:
            return ".cos - ????";
            break;

        case 0x33046CD5:
            return ".qcm - ????";
            break;

        case 0x1AADF7B7:
            return ".cms - ????";
            break;

        case 0xA4280D9:
            return ".shd - ????";
            break;

        case 0x2F4E7041:
            return ".sgt - ????";
            break;

        case 0x671F21DA:
            return ".stp - Start Position Coordinates";
            break;

        case 0x54DC440A:
            return ".msl - Message Serial";
            break;

        case 0x6A9197ED:
            return ".sst - Sound Related?";
            break;

        case 0x46FB08BA:
            return ".bmt - ????";
            break;

        case 0x2C2DE8CA:
        case 0x1EFB1B67: // RESIDENT EVIL 5 HASH
            return ".adh - Adhesion";
            break;

        case 0xECD7DF4:
            return ".scs - Sound Related?";
            break;

        case 0x315E81F:
            return ".sds - Sound Related?";
            break;

        case 0x232E228C:
            return ".rev - Sound Related?";
            break;

        case 0x2B40AE8F:
            return ".equ - Sound Related?";
            break;

        case 0x30FC745F:
            return ".smx - Sound Related?";
            break;

        case 0x49B5A885:
            return ".ssc - Sound Related?";
            break;

        case 0x2D462600:
            return ".gfd - GUI Font";
            break;

        case 0x22948394:
            return ".gui - GUI";
            break;

        case 0x07F768AF:
            return ".gii - GUI Icon";
            break;

        case 0x4323D83A:
            return ".stex - Scene Texture";
            break;

        case 0xDADAB62:
            return ".oba - Object Related?";
            break;

        case 0x2DC54131:
            return ".cdf - Cloth";
            break;

        case 0x758B2EB7:
            return ".cef - Common Effect";
            break;

        case 0x1BA81D3C:
            return ".nck - Neck";
            break;

        case 0x7A098625:
            return ".cwc - ????";
            break;

        case 0x1CC22F91:
            return ".epl - ????";
            break;

        case 0x1A5444D9:
            return ".cad - ????";
            break;

        case 0x65D3AC8E:
            return ".resmap - ????";
            break;

        case 0x13CFA2FA:
            return ".swm - ????";
            break;

        default:
            return "???? - Unknown Format";
            break;
    }
}

typedef struct // SKIP PADDING GARBAGE AKA ZEROS THEN HEAD INTO THE DATA BLOCK
{
    local ubyte zero;
        zero = ReadByte();
            while (zero == 0)
{
    FSkip(1);
        zero = ReadByte();
} // NOW, THE DATA BLOCK
    string EntireDataBlock <comment="Data block actually starts here because FSkip(0); doesn't show on the struct itself">;
} Data <comment="Data block, ZLib compressed; See 78 9C at the start of the block">;

typedef struct
{
    Header header;
if (header.FileCount > 0)
    Files files[header.FileCount] <comment="File entry", optimize=false>;
    Data data;
} Capcom_ARC <comment="Capcom .ARC Archive", name="CAPCOM MT Framework [.ARC] Archive">;

Capcom_ARC file;